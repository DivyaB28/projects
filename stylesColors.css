h1 {
  text-align: center;
}
.marker {
  width: 200px;
  height: 25px;
  background-color: red;
  margin: auto;
}
.one {
  /* background-color: red; */
  /* 
     The CSS rgb function accepts values, or arguments, for red, green, and blue, and 
     produces a color:
    rgb(red, green, blue);
    Each red, green, and blue value is a number from 0 to 255. 
    0 means that there's 0% of that color, and is black. 
    255 means that there's 100% of that color.
    */
  background-color: rgb(255, 0, 0);
  /* 
  The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:

box-shadow: offsetX offsetY color;
Here's how the offsetX and offsetY values work:

both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change.
  */
  box-shadow: 0 0 20px 0 red;

  /* 
  blurRadius value for the box-shadow property:

box-shadow: offsetX offsetY blurRadius color;
If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.
box-shadow: 5px 5px 5px red;
  */
}
.two {
  /* background-color: rgb(0, 255, 0); */
  /* 
  With hex colors, 00 is 0% of that color, and FF is 100%. 
  So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).
  */
  background-color: #00ff00;

  /*
The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, 
and a percentage from 0 to 100 for lightness.
, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. 
You must add the percent sign % to the saturation and lightness values.
Lightness is how bright a color appears, from 0%, or complete black, to 100%, 
complete white, with 50% being neutral.
  */
}

.three {
  background-color: hsl(240, 100%, 50%);
  /* 
  While the linear-gradient function needs a minimum of two color arguments to work, it can accept many color arguments.
   background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0,255,0));
  */
  /*
    Color-stops allow you to fine-tune where colors are placed along the gradient line.
     They are a length unit like px or percentages that follow a color in the linear-gradient function.
For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:
linear-gradient(90deg, red 90%, black);

  */
}
.sleeve {
  /* 
    Opacity describes how opaque, or non-transparent, something is. 
    For example, a solid wall is opaque, and no light can pass through. 
    But a drinking glass is much more transparent, and you can see through the glass to the other side.
    With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, 
    the element will be completely transparent, and at 1.0, or 100%, 
    the element will be completely opaque like it is by default.
    */
  width: 110px;
  height: 25px;
  /* background-color: white; */
  opacity: 0.5;

  /*
  The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:
rgba(redValue, greenValue, blueValue, alphaValue);
  */
  background: rgba(255, 255, 255, 0.5);
  /*
  border-left-width: 10px;
  border-left-style: solid;
  border-left-color: black;
  The border-left shorthand property lets you to set the left border's width, style, 
  and color at the same time.
Here is the syntax:
border-left: width style color;
  */
  border-left: 10px double rgba(0, 0, 0, 0.75);
}
.cap {
  width: 60px;
  height: 25px;
}
.cap,
.sleeve {
  display: inline-block;
}
