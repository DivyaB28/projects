/*
!important keyword to ensure these properties are always applied, 
regardless of order or specificity.
*/
span[class~="sr-only"] {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  clip-path: inset(50%) !important;
  -webkit-clip-path: inset(50%) !important;
  height: 1px !important;
  width: 1px !important;
  position: absolute !important;
  overflow: hidden !important;
  white-space: nowrap !important;
  padding: 0 !important;
  margin: -1px !important;
}

html {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #0a0a23;
}

h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}
/* 
Target your flex container with an h1 .flex selector. Give it a display property set to flex to enable the flexbox layout. Then set the flex-direction property to column-reverse - this will display the nested elements from bottom to top. 
Finally, set the gap property to 1rem to create some space between the elements.
*/
h1 .flex {
  display: flex;
  flex-direction: column-reverse;
  gap: 1rem;
}
/*
The :first-of-type pseudo-selector is used to target the first element that matches the selector.
 Create an h1 .flex span:first-of-type selector to target the first span element in your .flex container. 
*/
h1 .flex span:first-of-type {
  font-size: 0.7em;
}
/*
The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector. 
Create an h1 .flex span:last-of-type selector to target the last span in your flex container, and give it a font-size property set to 1.2em to make it look like a header.
*/
h1 .flex span:last-of-type {
  font-size: 1.2em;
}
/*
 Create a section selector, and give it a max-width property set to 40rem for responsive design. 
 Set the margin property to 0 auto to center it, and set the border property to 2px solid #d0d0d5.
*/
section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d0d5;
}
/*
 Create a #years selector, and enable flexbox. 
 Justify the content to the end of the flex direction, and make the element sticky. 
 Fix it to the top of its container with top: 0.
*/
/*
The calc() function is a CSS function that allows you to calculate a value based on other values. For example, you can use it to calculate the width of the viewport minus the margin of an element:

.example {
  margin: 10px;
  width: calc(100% - 20px);
}
*/
/*
Adding position sticky moved the element into its own stack.
 To ensure your #years element does not get hidden by different stacks, add a z-index property set to 999 in the #years rule.
*/
#years {
  display: flex;
  justify-content: flex-end;
  position: sticky;
  z-index: 999;
  top: 0;
  background: #0a0a23;
  color: #fff;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
  margin: 0 -2px;
}
/*
Style the text within your #years element by creating a #years span[class] selector. 
The span[class] syntax will target any span element that has a class attribute set, regardless of the attribute's value.
*/
#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}

.table-wrap {
  padding: 0 0.75rem 1.5rem 0.75rem;
}
/*
The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have the sr-only class. 
This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten.
*/
span {
  font-weight: normal;
}
/*
Set the border-collapse property to collapse, 
which will allow cell borders to collapse into a single border, instead of a border around each cell. 
*/
table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  position: relative;
  margin-top: 3rem;
}

table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}

/*
 width to fill the viewport, with a minimum and maximum of 4rem. 
 This approach ensures that the width is fixed, whereas setting width specifically would allow the elements to shrink to the container.
*/
tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}
tbody th {
  width: calc(100% - 12rem);
}
tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}
/*
The key difference between tr[class="total"] and tr.total is that 
the first will select tr elements where the only class is total. 
The second will select tr elements where the class includes total.
*/
tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}
/*
The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type. 
Use this pseudo-selector to target the third td element within your total table rows. 
Give it a right padding of 0.5rem.
*/
tr.total td:nth-of-type(3) {
  padding-right: 0.5rem;
}
tr.total:hover {
  background-color: #99c9ff;
}
td.current {
  font-style: italic;
}

tr.data {
  background-image: linear-gradient(
    to bottom,
    #dfdfe2 1.845rem,
    white 1.845rem
  );
}
tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}
tr.data th .description {
  display: block;
  font-style: italic;
  font-weight: normal;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}
tr.data td {
  vertical-align: top;
  text-align: right;
  padding: 0.3rem 0.25rem 0;
}
tr.data td:last-of-type {
  padding-right: 0.5rem;
}
